{"pages":[{"title":"关于我","date":"2017-06-20T13:45:26.000Z","path":"about/index.html","text":"自我介绍 籍贯云南，现居上海。软件工程专业，研究方向云计算,互联网和物联网。Spring Cloud中国社区创始人，目前就职于饿了么移动基础架构组。 曾就职于唯品会平台架构部，参与唯品会中间件(服务网关,应用框架，代码生成器等)相关的研发工作。 曾参与唯品会互联网金融平台的设计与开发(https://jinrong.vip.com/)， 曾参与基于云计算Iaas的平安科技云平台(www.pinganyun.com)和国泰君安证卷云平台的开发， 曾参与基于云计算Saas平台的云销售管理系统的开发等。开发的私有云产品应用于太平人寿，东亚银行，天翼视讯，上海证券交易所,国泰君安等。 熟练运用各种流行的JavaEE技术进行组合式架构设计与开发。业余时间研究并发编程，中间件，异地多活，Spring Cloud，ZStack(zstack.org.cn)，Mycat等开源项目，以及软件架构设计，程序性能优化，JVM，高并发等！ 联系方式 E-mail: ceo@xujin.org、Software_King@qq.com Github: Software_King 网站: http://xujin.org 博客: http://blog.xujin.org 网络ID:Software_King 微信:Software_King Spring Cloud中国社区:http://springcloud.cn 座右铭:软件世界就是模拟客观世界，从而需求分析，技术驱动，改造世界！"},{"title":"Categories","date":"2017-06-20T13:34:16.000Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2017-06-20T13:34:16.000Z","path":"tags/index.html","text":""}],"posts":[{"title":"关于我","date":"2017-06-07T10:37:00.000Z","path":"index/","text":"自我介绍 籍贯云南，现居上海。软件工程专业，研究方向云计算,互联网和物联网。Spring Cloud中国社区创始人，目前就职于饿了么移动基础架构组。 曾就职于唯品会平台架构部，参与唯品会中间件(服务网关,应用框架，代码生成器等)相关的研发工作。 曾参与唯品会互联网金融平台的设计与开发(https://jinrong.vip.com/)， 曾参与基于云计算Iaas的平安科技云平台(www.pinganyun.com)和国泰君安证卷云平台的开发， 曾参与基于云计算Saas平台的云销售管理系统的开发等。开发的私有云产品应用于太平人寿，东亚银行，天翼视讯，上海证券交易所,国泰君安等。 熟练运用各种流行的JavaEE技术进行组合式架构设计与开发。业余时间研究并发编程，中间件，异地多活，Spring Cloud，ZStack(zstack.org.cn)，Mycat等开源项目，以及软件架构设计，程序性能优化，JVM，高并发等！ 联系方式 E-mail: ceo@xujin.org、Software_King@qq.com Github: Software_King 网站: http://xujin.org 博客: http://blog.xujin.org 网络ID:Software_King 微信:Software_King Spring Cloud中国社区:http://springcloud.cn 座右铭:软件世界就是模拟客观世界，从而需求分析，技术驱动，改造世界！","tags":[],"categories":[]},{"title":"IaaS, PaaS, SaaS 概念","date":"2017-04-18T15:15:15.000Z","path":"项目经验/IaaS-PaaS-SaaS-概念/","text":"云服务通常将其提供的服务自下而上分成三层：基础设施(infrastructure)、平台(platform)和软件(software)。 IaaSInfrastructure-as-a-Service(基础设施即服务) 第一层叫做 IaaS，有时候也叫做 Hardware-as-a-Service，如果你想在办公室或者公司的网站上运行一些应用（比如自己开发好的 APP 或是网络游戏，你需要去买服务器，成本太高了。 但是现在有IaaS，你可以将硬件外包给这些专业的公司，这些公司会提供场外服务器，存储和网络硬件，你花钱租用就行。 这样就节省了维护成本和办公场地，并且你可以在任何时候利用这些硬件来运行其应用。 PaaSPlatform-as-a-Service（平台即服务） 第二层就是 PaaS，某些时候也叫做中间件。PaaS 是面向软件开发者的服务，云计算平台提供硬件，OS， 编程语言，开发库，部署工具， 帮助软件开发者更快的开发软件服务。 云服务商将软件开发的云端开发平台和软件运营的云端运行环境（包括中间件、数据库、we b服务、消息总线等基础通用服务）作为一种服务，提供给最终用户。 换句话说，这些 PaaS 服务商提供的都是基础开发服务平台，主要目的就是让你把精力专注在应用层面的开发上面，而不需要浪费在这些基础重复性的事情上，也不用担心开发完成后部署问题。 SaaSSoftware-as-a-Service（软件即服务） 简单说就是人家把你想要的功能开发好成应用软件，然后直接卖账号给你用，你也不需要担心服务器、带宽、应用开发等问题，直接交钱使用就行。 不再面向开发，而是直接面向企业或普通用户，企业改改 logo，直接给用户使用。 参考资料 IaaS PaaS和SaaS公司的作用 | 盐漂浮草 谁能举个通俗易懂的例子告诉我IAAS，SAAS，PAAS的区别？ | 东坪子的回答 谁能举个通俗易懂的例子告诉我IAAS，SAAS，PAAS的区别？ | 何足道的回答","tags":[{"name":"云服务","slug":"云服务","permalink":"http://xujin.org/wiki/tags/云服务/"}],"categories":[{"name":"项目经验","slug":"项目经验","permalink":"http://xujin.org/wiki/categories/项目经验/"}]},{"title":"IaaS, PaaS, SaaS 概念","date":"2017-04-18T15:15:15.000Z","path":"中间件/Spring-Cloud/IaaS-PaaS-SaaS-概念/","text":"云服务通常将其提供的服务自下而上分成三层：基础设施(infrastructure)、平台(platform)和软件(software)。 IaaSInfrastructure-as-a-Service(基础设施即服务) 第一层叫做 IaaS，有时候也叫做 Hardware-as-a-Service，如果你想在办公室或者公司的网站上运行一些应用（比如自己开发好的 APP 或是网络游戏，你需要去买服务器，成本太高了。 但是现在有IaaS，你可以将硬件外包给这些专业的公司，这些公司会提供场外服务器，存储和网络硬件，你花钱租用就行。 这样就节省了维护成本和办公场地，并且你可以在任何时候利用这些硬件来运行其应用。 PaaSPlatform-as-a-Service（平台即服务） 第二层就是 PaaS，某些时候也叫做中间件。PaaS 是面向软件开发者的服务，云计算平台提供硬件，OS， 编程语言，开发库，部署工具， 帮助软件开发者更快的开发软件服务。 云服务商将软件开发的云端开发平台和软件运营的云端运行环境（包括中间件、数据库、we b服务、消息总线等基础通用服务）作为一种服务，提供给最终用户。 换句话说，这些 PaaS 服务商提供的都是基础开发服务平台，主要目的就是让你把精力专注在应用层面的开发上面，而不需要浪费在这些基础重复性的事情上，也不用担心开发完成后部署问题。 SaaSSoftware-as-a-Service（软件即服务） 简单说就是人家把你想要的功能开发好成应用软件，然后直接卖账号给你用，你也不需要担心服务器、带宽、应用开发等问题，直接交钱使用就行。 不再面向开发，而是直接面向企业或普通用户，企业改改 logo，直接给用户使用。 参考资料 IaaS PaaS和SaaS公司的作用 | 盐漂浮草 谁能举个通俗易懂的例子告诉我IAAS，SAAS，PAAS的区别？ | 东坪子的回答 谁能举个通俗易懂的例子告诉我IAAS，SAAS，PAAS的区别？ | 何足道的回答","tags":[{"name":"云服务","slug":"云服务","permalink":"http://xujin.org/wiki/tags/云服务/"}],"categories":[{"name":"中间件","slug":"中间件","permalink":"http://xujin.org/wiki/categories/中间件/"},{"name":"Spring-Cloud","slug":"中间件/Spring-Cloud","permalink":"http://xujin.org/wiki/categories/中间件/Spring-Cloud/"}]},{"title":"Git 清理已追踪或未添加追踪的文件","date":"2017-04-17T14:51:30.000Z","path":"软件开发/Git/Git-清理已追踪或未添加追踪的文件/","text":"git add 将文件及其修改添加到 Git 索引和追踪当中，也就是将文件快照放入暂存区当中，但我们有时候想要丢弃本次修改过并添加到暂存区的内容，或者需要删除未被追踪的文件。 git checkoutgit checkout 是把文件从暂存区中恢复到工作区，也就是说源文件如果被修改，再使用 git add 添加到暂存区了，git checkout 无法把他再恢复到源文件，只能恢复到暂存时的状态。 git resetgit reset 可以用来重置工作区和暂存区还能更改 HEAD 指向，可以达到我们的丢弃本次修改到暂存区的目的。 1234# Usage: git reset [&lt;mode&gt;] [&lt;commit&gt;]# eg: git reset --mixed HEAD$ git reset HEAD$ git checkout . 首先使用 git reset HEAD 把暂存区重置到本次提交，再用 checkout 恢复文件到暂存区的状态，但我们暂存区已经重置了，所以实际 checkout 恢复到的是本次提交时的初始状态了。 git reset 有五种模式，不写明模式参数时，默认为 --mixed，几种模式间主要的差异在于重置的区域不同，这里总结下其异同：（表中不写的位置代表无操作） 重置工作区 重置暂存区 将 HEAD 指向指定 commit –hard √ √ √ –soft √ –mixed √ √ –merge 暂存区有文件则重置失败 √ –keep 暂存区有文件则重置失败 √ 所以刚才上面两行命令， reset 后再 checkou ，可以用 --hard 代替： 1git reset --hard HEAD git clean顺便一提，git reset --hard 是直接重置整个工作区，所以也会把未被添加追踪的新文件也删除了；但 git checkout 是恢复，所以不会影响未添加追踪的新文件。 git clean 就是用来删除未被添加追踪的文件和文件夹的。 1234git clean -n # 将显示哪些未被追踪的文件和文件夹可以清理git clean -d # 清理未被追踪的文件夹git clean -f # 清理未被追踪的文件git clean -df # 清理未被追踪的文件和文件夹 参考资料 git reset简介 Git 工作区、暂存区和版本库 git 删除已经 add 的文件","tags":[{"name":"Git","slug":"Git","permalink":"http://xujin.org/wiki/tags/Git/"}],"categories":[{"name":"软件开发","slug":"软件开发","permalink":"http://xujin.org/wiki/categories/软件开发/"},{"name":"Git","slug":"软件开发/Git","permalink":"http://xujin.org/wiki/categories/软件开发/Git/"}]},{"title":"语义化版本号 2.0.0","date":"2017-03-28T09:20:08.000Z","path":"软件开发/软件工程/语义化版本号-2-0-0/","text":"摘要版本格式：主版本号.次版本号.修订号，版本号递增规则如下： 主版本号：当你做了不兼容的 API 修改， 次版本号：当你做了向下兼容的功能性新增， 修订号：当你做了向下兼容的问题修正。 先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。 考虑使用这样的版本号格式：XYZ （主版本号.次版本号.修订号）修复问题但不影响API 时，递增修订号；API 保持向下兼容的新增及修改时，递增次版本号；进行不向下兼容的修改时，递增主版本号。 我称这套系统为“语义化的版本控制”，在这套约定下，版本号及其更新方式包含了相邻版本间的底层代码和修改内容的信息。 参考资料 Semantic Versioning 2.0.0","tags":[{"name":"版本控制","slug":"版本控制","permalink":"http://xujin.org/wiki/tags/版本控制/"},{"name":"开发规范","slug":"开发规范","permalink":"http://xujin.org/wiki/tags/开发规范/"}],"categories":[{"name":"软件开发","slug":"软件开发","permalink":"http://xujin.org/wiki/categories/软件开发/"},{"name":"软件工程","slug":"软件开发/软件工程","permalink":"http://xujin.org/wiki/categories/软件开发/软件工程/"}]},{"title":"Git commit message 基本规范","date":"2017-01-22T20:14:54.000Z","path":"软件开发/Git/Git-commit-message-基本规范/","text":"使用 git 提交版本时，commit message 很重要，在回顾 commit log 时需要清晰的知道每次改动是什么。 在我们写这个提交信息（commit message）时，应该遵守一定书写结构，帮助我们统一规范和理清思路。 一般遵守 thoughtbot 规范，这里有他们的详细说明 5 Useful Tips For A Better Commit Message。 12345678950-character subject line72-character wrapped longer description. This should answer:* Why was this change necessary?* How does it address the problem?* Are there any side effects?Include a link to the ticket, if any. 简单的说就是： 第一行不超过 50 个字符 第二行空一行 第三行开始是描述信息，每行长度不超过 72 个字符，有序号，结尾无句号 第三行开始的描述信息主要说明： 这个提交有什么改动？ 如何解决的问题？ 会对哪方面产生影响吗？ 描述信息完后空一行，close issue 或者给个相应 ticket 的链接 Example: 12345678fix($compile): couple of unit tests for IE9 1. Older IEs serialize html uppercased, but IE9 does not...2. Would be better to expect case insensitive, unfortunately jasmine does3. not allow to user regexps for throw expectations Closes #392Breaks foo.bar api, foo.baz should be used instead","tags":[{"name":"Git","slug":"Git","permalink":"http://xujin.org/wiki/tags/Git/"}],"categories":[{"name":"软件开发","slug":"软件开发","permalink":"http://xujin.org/wiki/categories/软件开发/"},{"name":"Git","slug":"软件开发/Git","permalink":"http://xujin.org/wiki/categories/软件开发/Git/"}]}]}