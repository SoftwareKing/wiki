<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xujin&#39;s Wiki</title>
  <subtitle>许进的wiki</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xujin.org/wiki/"/>
  <updated>2017-06-20T13:46:40.000Z</updated>
  <id>http://xujin.org/wiki/</id>
  
  <author>
    <name>xujin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于我</title>
    <link href="http://xujin.org/wiki/index/"/>
    <id>http://xujin.org/wiki/index/</id>
    <published>2017-06-07T10:37:00.000Z</published>
    <updated>2017-06-20T13:46:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h3><p>　籍贯云南，现居上海。软件工程专业，研究方向云计算,互联网和物联网。<code>Spring Cloud中国社区</code>创始人，目前就职于<code>饿了么移动基础架构组</code>。</p>
<ul>
<li>曾就职于<code>唯品会平台架构部</code>，参与<code>唯品会中间件(服务网关,应用框架，代码生成器等)</code>相关的研发工作。</li>
<li>曾参与唯品会<code>互联网金融平台的设计与开发(https://jinrong.vip.com/)</code>， </li>
<li>曾参与基于云计算Iaas的<code>平安科技云平台</code>(www.pinganyun.com)和<code>国泰君安证卷</code>云平台的开发，</li>
<li>曾参与基于<code>云计算Saas平台</code>的<code>云销售管理系统</code>的开发等。开发的私有云产品应用于<code>太平人寿</code>，<code>东亚银行</code>，<code>天翼视讯</code>，<code>上海证券交易所</code>,<code>国泰君安</code>等。</li>
<li>熟练运用各种流行的JavaEE技术进行组合式架构设计与开发。业余时间研究<code>并发编程</code>，<code>中间件</code>，<code>异地多活</code>，<code>Spring Cloud</code>，<code>ZStack</code>(zstack.org.cn)，Mycat等开源项目，以及软件架构设计，程序性能优化，JVM，高并发等！</li>
</ul>
<h3 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h3><ul>
<li>E-mail: <a href="mailto:ceo@xujin.org">ceo@xujin.org</a>、<a href="mailto:Software_King@qq.com" rel="external nofollow noopener noreferrer" target="_blank">Software_King@qq.com</a></li>
<li>Github: <a href="http://github.com/softwareking" rel="external nofollow noopener noreferrer" target="_blank">Software_King</a></li>
<li>网站: <a href="http://xujin.org">http://xujin.org</a> </li>
<li>博客: <a href="http://blog.xujin.org" rel="external nofollow noopener noreferrer" target="_blank">http://blog.xujin.org</a></li>
<li>网络ID:<code>Software_King</code></li>
<li>微信:<code>Software_King</code></li>
<li>Spring Cloud中国社区:<a href="http://springcloud.cn" rel="external nofollow noopener noreferrer" target="_blank">http://springcloud.cn</a></li>
<li>座右铭:软件世界就是模拟客观世界，从而需求分析，技术驱动，改造世界！</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;自我介绍&quot;&gt;&lt;a href=&quot;#自我介绍&quot; class=&quot;headerlink&quot; title=&quot;自我介绍&quot;&gt;&lt;/a&gt;自我介绍&lt;/h3&gt;&lt;p&gt;　籍贯云南，现居上海。软件工程专业，研究方向云计算,互联网和物联网。&lt;code&gt;Spring Cloud中国社区&lt;/code
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>IaaS, PaaS, SaaS 概念</title>
    <link href="http://xujin.org/wiki/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/IaaS-PaaS-SaaS-%E6%A6%82%E5%BF%B5/"/>
    <id>http://xujin.org/wiki/项目经验/IaaS-PaaS-SaaS-概念/</id>
    <published>2017-04-18T15:15:15.000Z</published>
    <updated>2017-06-07T10:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>云服务通常将其提供的服务自下而上分成三层：<strong>基础设施(infrastructure)、平台(platform)和软件(software)</strong>。</p>
<h2 id="IaaS"><a href="#IaaS" class="headerlink" title="IaaS"></a>IaaS</h2><p><strong>Infrastructure-as-a-Service(基础设施即服务)</strong></p>
<p>第一层叫做 IaaS，有时候也叫做 Hardware-as-a-Service，如果你想在办公室或者公司的网站上运行一些应用（比如自己开发好的 APP 或是网络游戏，你需要去买服务器，成本太高了。</p>
<p>但是现在有IaaS，你可以将硬件外包给这些专业的公司，这些公司会提供场外服务器，存储和网络硬件，你花钱租用就行。</p>
<p>这样就节省了维护成本和办公场地，并且你可以在任何时候利用这些硬件来运行其应用。</p>
<h2 id="PaaS"><a href="#PaaS" class="headerlink" title="PaaS"></a>PaaS</h2><p><strong>Platform-as-a-Service（平台即服务）</strong></p>
<p>第二层就是 PaaS，某些时候也叫做中间件。PaaS 是面向软件开发者的服务，云计算平台提供硬件，OS， 编程语言，开发库，部署工具， 帮助软件开发者更快的开发软件服务。</p>
<p>云服务商将软件开发的云端开发平台和软件运营的云端运行环境（包括中间件、数据库、we b服务、消息总线等基础通用服务）作为一种服务，提供给最终用户。</p>
<p>换句话说，这些 PaaS 服务商提供的都是基础开发服务平台，主要目的就是让你把精力专注在应用层面的开发上面，而不需要浪费在这些基础重复性的事情上，也不用担心开发完成后部署问题。</p>
<h2 id="SaaS"><a href="#SaaS" class="headerlink" title="SaaS"></a>SaaS</h2><p><strong>Software-as-a-Service（软件即服务）</strong></p>
<p>简单说就是人家把你想要的功能开发好成应用软件，然后直接卖账号给你用，你也不需要担心服务器、带宽、应用开发等问题，直接交钱使用就行。</p>
<p>不再面向开发，而是直接面向企业或普通用户，企业改改 logo，直接给用户使用。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<ul>
<li><a href="https://www.aliyun.com/zixun/content/1_5_15871.html" rel="external nofollow noopener noreferrer" target="_blank">IaaS PaaS和SaaS公司的作用 | 盐漂浮草</a></li>
<li><a href="https://zhihu.com/question/21641778/answer/91301221" rel="external nofollow noopener noreferrer" target="_blank">谁能举个通俗易懂的例子告诉我IAAS，SAAS，PAAS的区别？ | 东坪子的回答</a></li>
<li><a href="https://zhihu.com/question/21641778/answer/62523535" rel="external nofollow noopener noreferrer" target="_blank">谁能举个通俗易懂的例子告诉我IAAS，SAAS，PAAS的区别？ | 何足道的回答</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;云服务通常将其提供的服务自下而上分成三层：&lt;strong&gt;基础设施(infrastructure)、平台(platform)和软件(software)&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;IaaS&quot;&gt;&lt;a href=&quot;#IaaS&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="项目经验" scheme="http://xujin.org/wiki/categories/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="云服务" scheme="http://xujin.org/wiki/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>IaaS, PaaS, SaaS 概念</title>
    <link href="http://xujin.org/wiki/%E4%B8%AD%E9%97%B4%E4%BB%B6/Spring-Cloud/IaaS-PaaS-SaaS-%E6%A6%82%E5%BF%B5/"/>
    <id>http://xujin.org/wiki/中间件/Spring-Cloud/IaaS-PaaS-SaaS-概念/</id>
    <published>2017-04-18T15:15:15.000Z</published>
    <updated>2017-06-07T10:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>云服务通常将其提供的服务自下而上分成三层：<strong>基础设施(infrastructure)、平台(platform)和软件(software)</strong>。</p>
<h2 id="IaaS"><a href="#IaaS" class="headerlink" title="IaaS"></a>IaaS</h2><p><strong>Infrastructure-as-a-Service(基础设施即服务)</strong></p>
<p>第一层叫做 IaaS，有时候也叫做 Hardware-as-a-Service，如果你想在办公室或者公司的网站上运行一些应用（比如自己开发好的 APP 或是网络游戏，你需要去买服务器，成本太高了。</p>
<p>但是现在有IaaS，你可以将硬件外包给这些专业的公司，这些公司会提供场外服务器，存储和网络硬件，你花钱租用就行。</p>
<p>这样就节省了维护成本和办公场地，并且你可以在任何时候利用这些硬件来运行其应用。</p>
<h2 id="PaaS"><a href="#PaaS" class="headerlink" title="PaaS"></a>PaaS</h2><p><strong>Platform-as-a-Service（平台即服务）</strong></p>
<p>第二层就是 PaaS，某些时候也叫做中间件。PaaS 是面向软件开发者的服务，云计算平台提供硬件，OS， 编程语言，开发库，部署工具， 帮助软件开发者更快的开发软件服务。</p>
<p>云服务商将软件开发的云端开发平台和软件运营的云端运行环境（包括中间件、数据库、we b服务、消息总线等基础通用服务）作为一种服务，提供给最终用户。</p>
<p>换句话说，这些 PaaS 服务商提供的都是基础开发服务平台，主要目的就是让你把精力专注在应用层面的开发上面，而不需要浪费在这些基础重复性的事情上，也不用担心开发完成后部署问题。</p>
<h2 id="SaaS"><a href="#SaaS" class="headerlink" title="SaaS"></a>SaaS</h2><p><strong>Software-as-a-Service（软件即服务）</strong></p>
<p>简单说就是人家把你想要的功能开发好成应用软件，然后直接卖账号给你用，你也不需要担心服务器、带宽、应用开发等问题，直接交钱使用就行。</p>
<p>不再面向开发，而是直接面向企业或普通用户，企业改改 logo，直接给用户使用。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<ul>
<li><a href="https://www.aliyun.com/zixun/content/1_5_15871.html" rel="external nofollow noopener noreferrer" target="_blank">IaaS PaaS和SaaS公司的作用 | 盐漂浮草</a></li>
<li><a href="https://zhihu.com/question/21641778/answer/91301221" rel="external nofollow noopener noreferrer" target="_blank">谁能举个通俗易懂的例子告诉我IAAS，SAAS，PAAS的区别？ | 东坪子的回答</a></li>
<li><a href="https://zhihu.com/question/21641778/answer/62523535" rel="external nofollow noopener noreferrer" target="_blank">谁能举个通俗易懂的例子告诉我IAAS，SAAS，PAAS的区别？ | 何足道的回答</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;云服务通常将其提供的服务自下而上分成三层：&lt;strong&gt;基础设施(infrastructure)、平台(platform)和软件(software)&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;IaaS&quot;&gt;&lt;a href=&quot;#IaaS&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="中间件" scheme="http://xujin.org/wiki/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="Spring-Cloud" scheme="http://xujin.org/wiki/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/Spring-Cloud/"/>
    
    
      <category term="云服务" scheme="http://xujin.org/wiki/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Git 清理已追踪或未添加追踪的文件</title>
    <link href="http://xujin.org/wiki/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Git/Git-%E6%B8%85%E7%90%86%E5%B7%B2%E8%BF%BD%E8%B8%AA%E6%88%96%E6%9C%AA%E6%B7%BB%E5%8A%A0%E8%BF%BD%E8%B8%AA%E7%9A%84%E6%96%87%E4%BB%B6/"/>
    <id>http://xujin.org/wiki/软件开发/Git/Git-清理已追踪或未添加追踪的文件/</id>
    <published>2017-04-17T14:51:30.000Z</published>
    <updated>2017-06-07T10:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>git add</code> 将文件及其修改添加到 Git 索引和追踪当中，也就是将文件快照放入暂存区当中，但我们有时候想要<strong>丢弃本次修改过并添加到暂存区的内容</strong>，或者需要<strong>删除未被追踪的文件</strong>。</p>
<h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><p><code>git checkout</code> 是把文件<strong>从暂存区中恢复到工作区</strong>，也就是说源文件如果被修改，再使用 <code>git add</code> 添加到暂存区了，<code>git checkout</code> 无法把他再恢复到源文件，只能恢复到暂存时的状态。</p>
<h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><p><code>git reset</code> 可以用来重置工作区和暂存区还能更改 <code>HEAD</code> 指向，可以达到我们的丢弃本次修改到暂存区的目的。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Usage: git reset [&lt;mode&gt;] [&lt;commit&gt;]</span></div><div class="line"><span class="comment"># eg: git reset --mixed HEAD</span></div><div class="line">$ git reset HEAD</div><div class="line">$ git checkout .</div></pre></td></tr></table></figure>
<p>首先使用 <code>git reset HEAD</code> 把暂存区重置到本次提交，再用 <code>checkout</code> 恢复文件到暂存区的状态，但我们暂存区已经重置了，所以实际 <code>checkout</code> 恢复到的是本次提交时的初始状态了。</p>
<p><code>git reset</code> 有五种模式，不写明模式参数时，默认为 <code>--mixed</code>，几种模式间主要的差异在于重置的区域不同，这里总结下其异同：（表中不写的位置代表无操作）</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">重置工作区</th>
<th style="text-align:center">重置暂存区</th>
<th style="text-align:center">将 HEAD 指向指定 commit</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">–hard</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">–soft</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">–mixed</td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">–merge</td>
<td style="text-align:center"></td>
<td style="text-align:center">暂存区有文件则重置失败</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">–keep</td>
<td style="text-align:center"></td>
<td style="text-align:center">暂存区有文件则重置失败</td>
<td style="text-align:center">√</td>
</tr>
</tbody>
</table>
<p>所以刚才上面两行命令， <code>reset</code> 后再 <code>checkou</code> ，可以用 <code>--hard</code> 代替：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --hard HEAD</div></pre></td></tr></table></figure>
<h2 id="git-clean"><a href="#git-clean" class="headerlink" title="git clean"></a>git clean</h2><p>顺便一提，<code>git reset --hard</code> 是直接重置整个工作区，所以也会把未被添加追踪的新文件也删除了；但 <code>git checkout</code> 是恢复，所以不会影响未添加追踪的新文件。</p>
<p><code>git clean</code> 就是用来删除未被添加追踪的文件和文件夹的。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clean -n  <span class="comment"># 将显示哪些未被追踪的文件和文件夹可以清理</span></div><div class="line">git clean -d  <span class="comment"># 清理未被追踪的文件夹</span></div><div class="line">git clean -f  <span class="comment"># 清理未被追踪的文件</span></div><div class="line">git clean -df  <span class="comment"># 清理未被追踪的文件和文件夹</span></div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<ul>
<li><a href="http://blog.csdn.net/hudashi/article/details/7664464/" rel="external nofollow noopener noreferrer" target="_blank">git reset简介</a></li>
<li><a href="http://blog.csdn.net/felix_f/article/details/8777463" rel="external nofollow noopener noreferrer" target="_blank">Git 工作区、暂存区和版本库</a></li>
<li><a href="http://blog.csdn.net/yang3wei/article/details/9399723" rel="external nofollow noopener noreferrer" target="_blank">git 删除已经 add 的文件</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;git add&lt;/code&gt; 将文件及其修改添加到 Git 索引和追踪当中，也就是将文件快照放入暂存区当中，但我们有时候想要&lt;strong&gt;丢弃本次修改过并添加到暂存区的内容&lt;/strong&gt;，或者需要&lt;strong&gt;删除未被追踪的文件&lt;/strong&gt;。&lt;/p
    
    </summary>
    
      <category term="软件开发" scheme="http://xujin.org/wiki/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="Git" scheme="http://xujin.org/wiki/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Git/"/>
    
    
      <category term="Git" scheme="http://xujin.org/wiki/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>语义化版本号 2.0.0</title>
    <link href="http://xujin.org/wiki/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%AF%AD%E4%B9%89%E5%8C%96%E7%89%88%E6%9C%AC%E5%8F%B7-2-0-0/"/>
    <id>http://xujin.org/wiki/软件开发/软件工程/语义化版本号-2-0-0/</id>
    <published>2017-03-28T09:20:08.000Z</published>
    <updated>2017-06-07T10:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p>
<ol>
<li>主版本号：当你做了不兼容的 API 修改，</li>
<li>次版本号：当你做了向下兼容的功能性新增，</li>
<li>修订号：当你做了向下兼容的问题修正。</li>
</ol>
<p>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</p>
<p>考虑使用这样的版本号格式：XYZ （主版本号.次版本号.修订号）修复问题但不影响API 时，递增修订号；API 保持向下兼容的新增及修改时，递增次版本号；进行不向下兼容的修改时，递增主版本号。</p>
<p>我称这套系统为“语义化的版本控制”，在这套约定下，版本号及其更新方式包含了相邻版本间的底层代码和修改内容的信息。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<ul>
<li><a href="http://semver.org/" rel="external nofollow noopener noreferrer" target="_blank">Semantic Versioning 2.0.0</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;版本格式：主版本号.次版本号.修订号，版本号递增规则如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主版本号：当你做了不兼容的 API 修改，&lt;/li&gt;

    
    </summary>
    
      <category term="软件开发" scheme="http://xujin.org/wiki/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="软件工程" scheme="http://xujin.org/wiki/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="版本控制" scheme="http://xujin.org/wiki/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="开发规范" scheme="http://xujin.org/wiki/tags/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Git commit message 基本规范</title>
    <link href="http://xujin.org/wiki/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Git/Git-commit-message-%E5%9F%BA%E6%9C%AC%E8%A7%84%E8%8C%83/"/>
    <id>http://xujin.org/wiki/软件开发/Git/Git-commit-message-基本规范/</id>
    <published>2017-01-22T20:14:54.000Z</published>
    <updated>2017-06-07T10:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 git 提交版本时，commit message 很重要，在回顾 commit log 时需要清晰的知道每次改动是什么。</p>
<p>在我们写这个提交信息（commit message）时，应该遵守一定书写结构，帮助我们统一规范和理清思路。</p>
<p>一般遵守 <a href="https://github.com/thoughtbot/dotfiles/blob/master/gitmessage" rel="external nofollow noopener noreferrer" target="_blank"><strong>thoughtbot 规范</strong></a>，这里有他们的详细说明 <a href="https://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message" rel="external nofollow noopener noreferrer" target="_blank">5 Useful Tips For A Better Commit Message</a>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">50-character subject line</div><div class="line"></div><div class="line">72-character wrapped longer description. This should answer:</div><div class="line"></div><div class="line">* Why was this change necessary?</div><div class="line">* How does it address the problem?</div><div class="line">* Are there any side effects?</div><div class="line"></div><div class="line">Include a link to the ticket, <span class="keyword">if</span> any.</div></pre></td></tr></table></figure>
<p>简单的说就是：</p>
<ol>
<li>第一行不超过 50 个字符</li>
<li>第二行空一行</li>
<li>第三行开始是描述信息，每行长度不超过 72 个字符，有序号，结尾无句号</li>
<li>第三行开始的描述信息主要说明：<ul>
<li>这个提交有什么改动？</li>
<li>如何解决的问题？</li>
<li>会对哪方面产生影响吗？</li>
</ul>
</li>
<li>描述信息完后空一行，close issue 或者给个相应 ticket 的链接</li>
</ol>
<p>Example:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">fix(<span class="variable">$compile</span>): couple of unit tests <span class="keyword">for</span> IE9</div><div class="line"> </div><div class="line">1. Older IEs serialize html uppercased, but IE9 does not...</div><div class="line">2. Would be better to expect <span class="keyword">case</span> insensitive, unfortunately jasmine does</div><div class="line">3. not allow to user regexps <span class="keyword">for</span> throw expectations</div><div class="line"> </div><div class="line">Closes <span class="comment">#392</span></div><div class="line">Breaks foo.bar api, foo.baz should be used instead</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 git 提交版本时，commit message 很重要，在回顾 commit log 时需要清晰的知道每次改动是什么。&lt;/p&gt;
&lt;p&gt;在我们写这个提交信息（commit message）时，应该遵守一定书写结构，帮助我们统一规范和理清思路。&lt;/p&gt;
&lt;p&gt;一般遵守 
    
    </summary>
    
      <category term="软件开发" scheme="http://xujin.org/wiki/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="Git" scheme="http://xujin.org/wiki/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Git/"/>
    
    
      <category term="Git" scheme="http://xujin.org/wiki/tags/Git/"/>
    
  </entry>
  
</feed>
